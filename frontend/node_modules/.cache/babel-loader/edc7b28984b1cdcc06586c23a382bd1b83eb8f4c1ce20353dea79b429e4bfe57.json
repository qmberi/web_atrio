{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport apiClient from '@/../utils/api.js';\nexport const useCategoryStore = defineStore('category', {\n  state: () => ({\n    categories: [],\n    loading: false\n  }),\n  actions: {\n    async fetchCategories() {\n      this.loading = true;\n      try {\n        const response = await apiClient.get('/index/category');\n        console.log(\"categorie en cours\", response);\n        this.categories = response.data;\n        console.log(\"categorie finis\", response);\n      } catch (error) {\n        console.error('Erreur de la récuperationdes données');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async createCategory(name) {\n      try {\n        const response = apiClient.post('/index/category', {\n          name\n        });\n        console.log(\"categorie en cours\", response);\n        this.categories.push(response.data);\n        console.log(\"categorie finis\", response);\n      } catch (error) {\n        console.error(\"Erreur lors de la creation de la categorie \", error);\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","apiClient","useCategoryStore","state","categories","loading","actions","fetchCategories","response","get","console","log","data","error","createCategory","name","post","push"],"sources":["/Users/mberi/Documents/dev/java/test-web-atrio/frontend/src/stores/categoryStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport apiClient from '@/../utils/api.js';\n\nexport const useCategoryStore = defineStore('category', {\n    state: () => ({\n        categories: [],\n        loading: false\n    }),\n    actions: {\n        async fetchCategories() {\n            this.loading = true;\n            try {\n                const response = await apiClient.get('/index/category');\n                console.log(\"categorie en cours\", response);\n                this.categories = response.data;\n\n                console.log(\"categorie finis\", response);\n            } catch (error) {\n                console.error('Erreur de la récuperationdes données');\n            } finally {\n                this.loading = false;\n            }\n        },\n        async createCategory(name) {\n            try {\n                const response = apiClient.post('/index/category', { name });\n\n                console.log(\"categorie en cours\", response);\n                this.categories.push(response.data);\n                console.log(\"categorie finis\", response);\n            } catch (error) {\n                console.error(\"Erreur lors de la creation de la categorie \", error);\n            }\n        }\n    }\n});"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,SAAS,MAAM,mBAAmB;AAEzC,OAAO,MAAMC,gBAAgB,GAAGF,WAAW,CAAC,UAAU,EAAE;EACpDG,KAAK,EAAEA,CAAA,MAAO;IACVC,UAAU,EAAE,EAAE;IACdC,OAAO,EAAE;EACb,CAAC,CAAC;EACFC,OAAO,EAAE;IACL,MAAMC,eAAeA,CAAA,EAAG;MACpB,IAAI,CAACF,OAAO,GAAG,IAAI;MACnB,IAAI;QACA,MAAMG,QAAQ,GAAG,MAAMP,SAAS,CAACQ,GAAG,CAAC,iBAAiB,CAAC;QACvDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,QAAQ,CAAC;QAC3C,IAAI,CAACJ,UAAU,GAAGI,QAAQ,CAACI,IAAI;QAE/BF,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,QAAQ,CAAC;MAC5C,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,sCAAsC,CAAC;MACzD,CAAC,SAAS;QACN,IAAI,CAACR,OAAO,GAAG,KAAK;MACxB;IACJ,CAAC;IACD,MAAMS,cAAcA,CAACC,IAAI,EAAE;MACvB,IAAI;QACA,MAAMP,QAAQ,GAAGP,SAAS,CAACe,IAAI,CAAC,iBAAiB,EAAE;UAAED;QAAK,CAAC,CAAC;QAE5DL,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,QAAQ,CAAC;QAC3C,IAAI,CAACJ,UAAU,CAACa,IAAI,CAACT,QAAQ,CAACI,IAAI,CAAC;QACnCF,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,QAAQ,CAAC;MAC5C,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACvE;IACJ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}